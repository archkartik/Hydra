// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

// I4ET - Team Hydra
contract MineDetectionContract {
    
    // Data structure definition for Mine Detection Event
    struct MineEventData {
        uint eventId;           // Unique identifier for each mine event
        string gpsPosition;     // GPS position of the mine event
        uint timestamp;         // Timestamp of when the mine event was logged
        uint depth;             // Depth at which the mine event was detected
        bool isMine;            // Whether a mine was detected or not
    }

    // Hardcoded addresses of the account that can add data to the contract
    address private constant mineDetectionAdder = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;

    // Hardcoded address of the account that can view data from the contract
    address private constant mineDetectionViewer = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2;

    // Mapping to store mine event data, with the event ID as the key
    mapping(uint => MineEventData) private mineEventLog;
    
    // Counter to generate unique event IDs for new mine events
    uint private eventIdCounter;

    // Event that will be emitted when a mine event is logged
    event MineEventLogged(
        uint eventId,
        string gpsPosition,
        uint timestamp,
        uint depth,
        bool isMine
    );

    // Modifier to restrict function access to the mineDetectionAdder account
    modifier onlyAdder() {
        require(msg.sender == mineDetectionAdder, "Adder authorization is required.");
        _;
    }

    // Modifier to restrict function access to the mineDetectionViewer account
    modifier onlyViewer() {
        require(msg.sender == mineDetectionViewer, "Viewer authorization is required.");
        _;
    }

    // Constructor sets the initial event ID counter to 1
    constructor() {
        eventIdCounter = 1;
    }

    // Function to record a mine event
    function recordMineEvent(string memory _gpsPosition, uint _depth, bool _isMine) public onlyAdder {
        
        // Check that the input data is valid
        require(bytes(_gpsPosition).length > 0, "GPS position is required.");
        require(_depth > 0, "Depth must be greater than 0.");

        // Generate a new event ID
        uint newEventId = eventIdCounter++;

        // Create a new MineEventData struct and store it in the mineEventLog mapping
        mineEventLog[newEventId] = MineEventData({
            eventId: newEventId,
            gpsPosition: _gpsPosition,
            timestamp: block.timestamp,
            depth: _depth,
            isMine: _isMine
        });

        // Emit an event to log the mine event
        emit MineEventLogged(newEventId, _gpsPosition, block.timestamp, _depth, _isMine);
    }

    // Function to retrieve data about a specific mine event
    function retrieveMineEvent(uint _eventId) public view onlyViewer returns (uint eventId, string memory gpsPosition, uint timestamp, uint depth, bool isMine) {
        
        // Check that the event ID exists
        require(mineEventLog[_eventId].timestamp != 0, "Event id does not exist.");

        // Retrieve the MineEventData struct for the specified event ID
        MineEventData memory retrievedData = mineEventLog[_eventId];
        
        // Return the data fields of the MineEventData struct
        return (
            retrievedData.eventId,
            retrievedData.gpsPosition,
            retrievedData.timestamp,
            retrievedData.depth,
            retrievedData.isMine
        );
    }
}
